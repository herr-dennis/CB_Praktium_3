PARSER_BEGIN(MiniJava)

import exceptions.ConstantModificationException;
import exceptions.SymbolNotDeclaredException;
import exceptions.SymbolDoesNotExist;
import exceptions.SymbolAlreadyDefinedException;
import exceptions.RwertException;
import exceptions.WrongParametersException;import java.util.ArrayList;

public class MiniJava {
    static SymbolTable table = new SymbolTable();
    static CodeErzeugung codeErzeugung = new  CodeErzeugung();
    static TableHandler tableHandler = new TableHandler();
    static ConstantPool constantPool = new ConstantPool();

}

PARSER_END(MiniJava)

SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN : {< FINAL: "final">}
TOKEN : {< INT : "int">}
TOKEN : { < WHILE : "while" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < PRINT : "print" > }
TOKEN : { <VOID : "void">}
TOKEN : { <FUNC : "func">}
TOKEN : { <RETURN : "return">}
TOKEN : { < NUMBER : ( <DIGIT> )+ > }
TOKEN : { < DIGIT : [ "0"-"9" ] > }
TOKEN : { < KLAMMERAUF : "(" > }
TOKEN : { < KLAMMERZU : ")" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < MAL : "*" > }
TOKEN : { < DIV : "/" > }
TOKEN : { <ComOp: "<" | ">" |"<=" |">=" |"==" |"!=" > }
TOKEN : {< IDENT : ["a"-"z"] (["a"-"z" , "A"-"z"])*>}
void Empty () : {}
{ {}}

 void programm () throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist ,WrongParametersException  ,RwertException:{}
{
   constDecl() varDeclGlobal()  (procedure())*  (function())*
   statement()
  {codeErzeugung.add("return");

int jumpToMain = table.getBytesAllMethods()+2;
codeErzeugung.setJumpOverMethod("goto " +Integer.toString(jumpToMain) );
}
  <EOF> { codeErzeugung.print(); codeErzeugung.translateToOpcodes(); codeErzeugung.printByteCode(); System.out.println(codeErzeugung.getByteCount());
  }
}

void constDecl () throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist ,WrongParametersException ,RwertException:{}
{
   <FINAL> <INT> constZuw() constList() ";" |
   Empty()
}

void constZuw()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException ,RwertException:{}
{
  <IDENT> { String ide = token.image; }
      "="
      <NUMBER>
      {
          int value = Integer.parseInt(token.image);
          // Prüfen, ob eine lokale Tabelle existiert
          SymbolTable currentTable = tableHandler.currentTable();
          if (currentTable != null) {
              currentTable.addConst(ide, value); // In lokale Tabelle eintragen
          } else {
              constantPool.addGlobalVariable(ide);
              table.addConst(ide, value); // In globale Tabelle eintragen
          }
      }
}

void constList ()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException ,RwertException:{}
{
  "," constZuw() constList() |
  Empty()
}

void varDeclGlobal() throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException ,RwertException: {}
{
  <INT> <IDENT> { String ide = token.image; } varZuwGlobal(ide) varListGlobal() ";" |
  Empty()
}

void varZuwGlobal(String ide) throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist ,WrongParametersException,RwertException: {}
{
  "=" <NUMBER> { table.addVar(ide, Integer.parseInt(token.image));  String index =  constantPool.addGlobalVariable(ide); codeErzeugung.add("bipush "+table.getValue(ide)); codeErzeugung.add("putstatic "+"[g"+ide+"]" );} |
  Empty()
}

void varListGlobal() throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException : {}
{
  "," <IDENT> { String ide = token.image; } varZuwGlobal(ide) varListGlobal() |
  Empty()
}


void varDeclLocal() throws ConstantModificationException, SymbolAlreadyDefinedException, SymbolNotDeclaredException, SymbolDoesNotExist,WrongParametersException ,RwertException: {}
{
    <INT> <IDENT> {
        String ide = token.image;}
    varZuwLocal(ide) varListLocal() ";" |
    Empty()
}

void varZuwLocal(String ide) throws ConstantModificationException, SymbolAlreadyDefinedException, SymbolNotDeclaredException, SymbolDoesNotExist ,WrongParametersException,RwertException: {}
{
    "=" <NUMBER> {
        SymbolTable localTable = tableHandler.currentTable();
        String methodName = localTable.getCurrentMethodName();
        int anzahlPara = table.getParameterFromMethodPara(methodName);
        localTable.setAddress(anzahlPara);
        localTable.addLocalVar(ide, Integer.parseInt(token.image));
        table.addCodeToMethod(methodName,"bipush " + localTable.getValue(ide) );
        table.addCodeToMethod(methodName,"istore " + localTable.getAddress(ide) );
    } |
    Empty()
}

void varListLocal() throws ConstantModificationException, SymbolAlreadyDefinedException, SymbolNotDeclaredException, SymbolDoesNotExist ,WrongParametersException,RwertException: {}
{
    "," <IDENT> {
        String ide = token.image;

    }
    varZuwLocal(ide) varListLocal() |
    Empty()
}


void expression()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist ,WrongParametersException,RwertException:{}
{
   term() summe()
}

void term()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException :{}
{
 faktor() produkt()
}

void summe()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException ,RwertException:{}{
 <PLUS>  term(){codeErzeugung.add("iadd");}  summe()  |
 <MINUS> term()  {codeErzeugung.add("isub");} summe() |
 Empty()
}

void produkt()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist ,WrongParametersException,RwertException:{}
{
 <MAL> faktor()  {codeErzeugung.add("imul");} produkt() |
 <DIV> faktor()  {codeErzeugung.add("idiv");} produkt() |
 Empty()
}

void faktor()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException ,RwertException ,RwertException:{}
{
  <NUMBER>    { if(!tableHandler.localTableExists())
               codeErzeugung.add("bipush " + token.image);
               else {
                   SymbolTable localTable = tableHandler.currentTable();
                   String currentMethod = localTable.getCurrentMethodName(); // Aktuelle Methode bestimmen
                   localTable.addCodeToMethod(currentMethod,"bipush "+token.image);
               }

               }


            |
  <IDENT>
   {
   SymbolTable localTable_ = tableHandler.currentTable();


       boolean inLocalTable = (localTable_ != null && localTable_.contains(token.image));
       boolean inGlobalTable = table.contains(token.image);
       boolean isMethod = table.containsMethod(token.image);

       if (!inLocalTable && !inGlobalTable && !isMethod) {
           throw new RwertException("Bezeichner '" + token.image + "' ist nicht definiert.");
       }
  String ide = token.image;} (functionCall(token.image) | Empty())
     {
             if(tableHandler.localTableExists()||table.contains(token.image)){
             //Prüfe ob es keine LocaleSymbolTabelle gibt
             if (!tableHandler.localTableExists()) {
                 // Variable global -> Prüfe globale Tabelle
                 if (!table.contains(token.image)) {
                     throw new SymbolNotDeclaredException();
                 }
                 if(table.getTyp(token.image).equals("const")){
                  codeErzeugung.add("bipush " + table.getValue(token.image));
                 }else{
                     codeErzeugung.add("getstatic " +"[g"+ide+"]");
                 }
             //Else-Fall, es gibt eine LocaleTabelle!
             } else {
                 // Lokale Tabelle -> Prüfe zuerst lokale, dann globale Tabelle
                 System.out.println("HIER NICHT2");
                 SymbolTable localTable = tableHandler.currentTable();
                 String methodeName = localTable.getCurrentMethodName();
                 if (localTable.contains(token.image)) {
                      if(localTable.getTyp(token.image).equals("const")){
                          table.addCodeToMethod ( methodeName, "bipush " + localTable.getValue(token.image));}
                      else{
                          table.addCodeToMethod ( methodeName, "iload " + localTable.getAddress(token.image));}

                 } else if (table.contains(token.image)) {
                     // Fallback auf globale Tabelle
                      if(table.getTyp(token.image).equals("const")){
                          codeErzeugung.add("bipush " + table.getValue(token.image));}
                      else{

                          codeErzeugung.add("iload " + table.getAddress(token.image));}
                 } else {
                     throw new SymbolNotDeclaredException();
                 }
             }
         }}
  |
  <KLAMMERAUF> expression() <KLAMMERZU>
}

void statement() throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException ,RwertException: {}
{
    <IDENT>
    {
        String ide = token.image;
        if (table.getTyp(ide)!=null && table.getTyp(ide).equals("const")) {
            throw new ConstantModificationException();
        }
    }
    (
        "=" expression() {

         if (!tableHandler.localTableExists()){
             codeErzeugung.add("getstatic " +"[g"+ide+"]");
         }
         else{
             SymbolTable localTable = tableHandler.currentTable();
             String methodeName = localTable.getCurrentMethodName();
             table.addCodeToMethod(methodeName,"istore " +table.getAddress(ide));

         }
       }
        | procCall(ide)) ";"

    |
    <PRINT> <KLAMMERAUF> expression() {

      if (!tableHandler.localTableExists()){
          codeErzeugung.add("print 00 23");
      }
      else {
           SymbolTable localTable = tableHandler.currentTable();
           String methodeName = localTable.getCurrentMethodName();
           table.addCodeToMethod(methodeName,"print 00 23") ;
      }

      } <KLAMMERZU> ";"
    |
    <IF>

     {int vor_condition_if = codeErzeugung.getByteCount();}
    condition()
      {int nach_condition_if =codeErzeugung.getByteCount()-2;}
    statement()

     {int nach_state_if = codeErzeugung.getByteCount();
     int if_anweisung_if = (nach_state_if) - (nach_condition_if-1);
      codeErzeugung.insertAddress(Integer.toString(if_anweisung_if));
      //codeErzeugung.add("goto " +gotoStrung);
      }
    optElse()
     |
    "{" stmtLIST() "}"

    |
  <WHILE>  {int vor_condition = codeErzeugung.getByteCount();}

      condition()

       {int nach_condition =codeErzeugung.getByteCount()-2;}

       statement()
       {
            int nach_Statement = codeErzeugung.getByteCount();
            // Berechnung für goto-Sprung
            int gotoStrung = vor_condition - nach_Statement ;
            codeErzeugung.add("goto " +gotoStrung);
            int nach_goto = codeErzeugung.getByteCount();
            //if sprung
            int if_anweisung = (nach_goto) - (nach_condition-1);
             // Zieladresse für Bedingung setzen (if-Anweisung)
            codeErzeugung.insertAddress(Integer.toString(if_anweisung));
      }
  }


void stmtLIST() throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException: {}
{
statement() stmtLIST() |
Empty()
}

void optElse() throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist ,WrongParametersException,RwertException: {}
{
 <ELSE>
 {int bevor_else = codeErzeugung.getByteCount();}
 statement()
 {int else_state = codeErzeugung.getByteCount()-bevor_else;
    //codeErzeugung.insertAdress("goto else_state");
                                                          }
 |

 Empty()
}

void condition() throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException:{}
{
expression() <ComOp> {String compOp =token.image;} expression()
{
    boolean existsLocalTable = false;
    SymbolTable localTable = null;
    String methodeName = null;

    // Überprüfen, ob eine lokale Tabelle existiert
    if (tableHandler.localTableExists()) {
        existsLocalTable = true;
        localTable = tableHandler.currentTable();
        methodeName = localTable.getCurrentMethodName();
    }

    // Switch-Fallunterscheidung für Vergleichsoperatoren
    switch (compOp) {
        case "<":
            if (existsLocalTable) {
                table.addCodeToMethod(methodeName, "if_icmpge -1");
            } else {
                codeErzeugung.add("if_icmpge -1"); // Für globale Tabelle
            }
            break;
        case "<=":
            if (existsLocalTable) {
                table.addCodeToMethod(methodeName, "if_icmpgt -1");
            } else {
                codeErzeugung.add("if_icmpgt -1");
            }
            break;
        case ">":
            if (existsLocalTable) {
                table.addCodeToMethod(methodeName, "if_icmple -1");
            } else {
                codeErzeugung.add("if_icmple -1");
            }
            break;
        case ">=":
            if (existsLocalTable) {
                table.addCodeToMethod(methodeName, "if_icmplt -1");
            } else {
                codeErzeugung.add("if_icmplt -1");
            }
            break;
        case "==":
            if (existsLocalTable) {
                table.addCodeToMethod(methodeName, "if_icmpne -1");
            } else {
                codeErzeugung.add("if_icmpne -1");
            }
            break;
        case "!=":
            if (existsLocalTable) {
                table.addCodeToMethod(methodeName, "if_icmpeq -1");
            } else {
                codeErzeugung.add("if_icmpeq -1");
            }
            break;
        default:
            throw new IllegalArgumentException("Ungültiger Vergleichsoperator: " + compOp);
    }

    }
}

void procedure() throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException:{}
{

<VOID> <IDENT> {String ide = token.image; tableHandler.createTable(ide); table.addMethod(ide, "void");} <KLAMMERAUF>  ( routinenParameter(ide)|Empty() ) <KLAMMERZU>
     "{" (routinenBlock() | Empty() )"}"
     {table.addCodeToMethod(ide, "return");
      constantPool.addMethod(ide,"void", table.getParameterFromMethodPara(ide));
      ArrayList<String> methodCode = table.getByteCodeForMethod(ide);
      codeErzeugung.insertMethodCode(methodCode);
      tableHandler.removeCurrentTable();}
}

void function () throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException:{}
{

<FUNC> <IDENT> { String ide = token.image; tableHandler.createTable(ide); table.addMethod(ide, "func");}<KLAMMERAUF> (routinenParameter(ide)| Empty()) <KLAMMERZU>
"{" (routinenBlock() | Empty() )  <RETURN>  expression() ";" "}"
{
table.addCodeToMethod(ide, "ireturn");
constantPool.addMethod(ide,"int", table.getParameterFromMethodPara(ide));

ArrayList<String> methodCode = table.getByteCodeForMethod(ide);
codeErzeugung.insertMethodCode(methodCode);
tableHandler.removeCurrentTable();}

}

void routinenParameter(String ide)throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException:{}
{
{SymbolTable symbolTable = tableHandler.currentTable(); int para = 0;}
<INT>  <IDENT>   {para = para +1;} (("," <INT> <IDENT> {  para = para +1;})* | Empty() )
{ table.addMethodPara(ide, para);}
}

void routinenBlock()throws ConstantModificationException , SymbolAlreadyDefinedException , SymbolNotDeclaredException , SymbolDoesNotExist,WrongParametersException,RwertException:{}
{
     (constDecl()|Empty()) (varDeclLocal() |Empty())  statement()
}

void functionCall(String ide) throws ConstantModificationException, SymbolAlreadyDefinedException, SymbolNotDeclaredException, SymbolDoesNotExist ,WrongParametersException,RwertException: {}
{
    {int anzahlPara = 0;}
    <KLAMMERAUF>
    (expression() {anzahlPara++;} ("," expression(){anzahlPara++;})* | Empty())
    <KLAMMERZU>varDeclLocal()
    {int methodPara = table.getActuallyMethodPara(ide);
    if(methodPara!=anzahlPara){
      throw new WrongParametersException();
    }

    codeErzeugung.add("invokestatic "+ 11);
    }
}

void procCall(String ide) throws ConstantModificationException, SymbolAlreadyDefinedException, SymbolNotDeclaredException, SymbolDoesNotExist ,WrongParametersException,RwertException: {}
{
    {int anzahlPara = 0;}
        <KLAMMERAUF>
        (expression() {anzahlPara++;} ("," expression(){anzahlPara++;})* | Empty())
        <KLAMMERZU>varDeclLocal()
        {int methodPara = table.getActuallyMethodPara(ide);
        if(methodPara!=anzahlPara){
          throw new WrongParametersException();
        }
        codeErzeugung.add("invokestatic "+ 11);
        }
}





































