PARSER_BEGIN(MiniJava)

public class MiniJava{

    static SymbolTable table = new SymbolTable();
    static CodeErzeugung codeErzeugung = new  CodeErzeugung();

}

PARSER_END(MiniJava)

SKIP : { " " | "\t" | "\n" | "\r" }
TOKEN : {< FINAL: "final">}
TOKEN : {< INT : "int">}
TOKEN : { < WHILE : "while" > }
TOKEN : { < IF : "if" > }
TOKEN : { < ELSE : "else" > }
TOKEN : { < PRINT : "print" > }
TOKEN : { < NUMBER : ( <DIGIT> )+ > }
TOKEN : { < DIGIT : [ "0"-"9" ] > }
TOKEN : { < KLAMMERAUF : "(" > }
TOKEN : { < KLAMMERZU : ")" > }
TOKEN : { < PLUS : "+" > }
TOKEN : { < MINUS : "-" > }
TOKEN : { < MAL : "*" > }
TOKEN : { < DIV : "/" > }
TOKEN : { <ComOp: "<" | ">" |"<=" |">=" |"==" |"!=" > }
TOKEN : {< IDENT : ["a"-"z"] (["a"-"z" , "A"-"z"])*>}
void Empty () : {}
{ {}}

 void programm ():{}
{
  constDecl() varDecl() (statement())* <EOF> { codeErzeugung.print(); codeErzeugung.translateToOpcodes(); codeErzeugung.printByteCode(); }
}

void constDecl ():{}
{
   <FINAL> <INT> constZuw() constList() ";" |
   Empty()
}

void constZuw():{}
{
  <IDENT> {String ide = token.image;}
  "="
  <NUMBER> {table.addConst(ide, Integer.parseInt( token.image)); codeErzeugung.add("bipush "+table.getValue(ide)); codeErzeugung.add("istore "+table.getAddress(ide));}
}

void constList ():{}
{
  "," constZuw() constList() |
  Empty()
}

void varDecl() : {}
{
  <INT> <IDENT> { String ide = token.image; } varZuw(ide) varList() ";" |
  Empty()
}

void varZuw(String ide) : {}
{
  "=" <NUMBER> { table.addVar(ide, Integer.parseInt(token.image));  codeErzeugung.add("bipush "+table.getValue(ide)); codeErzeugung.add("istore "+table.getAddress(ide));} |
  Empty()
}

void varList() : {}
{
  "," <IDENT> { String ide = token.image; } varZuw(ide) varList() |
  Empty()
}

void expression():{}
{
   term() summe()
}

void term():{}
{
 faktor() produkt()
}

void summe():{}{
 <PLUS>  term(){codeErzeugung.add("iadd");}  summe()  |
 <MINUS> term()  {codeErzeugung.add("isub");} summe() |
 Empty()
}

void produkt():{}
{
 <MAL> faktor()  {codeErzeugung.add("imul");} produkt() |
 <DIV> faktor()  {codeErzeugung.add("idiv");} produkt() |
 Empty()
}

void faktor():{}
{
  <NUMBER>    {codeErzeugung.add("bipush " + token.image);}    |
  <IDENT>   {codeErzeugung.add("iload "+table.getAddress(token.image));}|
  <KLAMMERAUF> expression() <KLAMMERZU>
}

void statement():{}
{
  <IDENT> {String ide = token.image;  if(table.getTyp(ide)=="const"){
    throw new SymbolAlreadyDefinedException();
}}
   "=" expression()";"
   {codeErzeugung.add("istore "+ table.getAddress(ide));} |
  <PRINT> <KLAMMERAUF> expression() <KLAMMERZU> ";"
}



































